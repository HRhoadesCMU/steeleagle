#####################################################################
# NOTE: THIS FILE IS AUTOGENERATED BY GENERATE_PROXY.PY. DO NOT EDIT!
#####################################################################

import grpc
# Protocol import
import bindings.python.services.{{ service_filename }}_pb2 as {{ service_filename }}_pb2
import bindings.python.services.{{ service_filename }}_pb2_grpc as {{ service_filename }}_pb2_grpc

class {{ service_name }}Proxy({{ service_filename }}_pb2_grpc.{{ service_name }}Servicer):
    '''
    Proxy servicer that forwards RPC requests to the correct internal service.
    This allows identity verification and command authorization without increasing
    burden of implementation for external services.
    '''
    def __init__(self):
        self._channel = grpc.aio.insecure_channel('{{ channel }}')
        self._stub = {{ service_filename }}_pb2_grpc.{{ service_name }}Stub(self._channel)
    {% for method in methods %}{% if method.streaming %}
    async def {{ method.name }}(self, request, context):
        async for resp in self._stub.{{ method.name }}(request):
            yield resp
    {% else %}
    async def {{ method.name }}(self, request, context):
        return await self._stub.{{ method.name }}(request)
    {% endif %}{% endfor %}
