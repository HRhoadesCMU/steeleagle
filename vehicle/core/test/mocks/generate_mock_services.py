import sys
from google.protobuf import descriptor_pb2
import os

def generate_mock_services(service_name, service_proto, output_path):
    '''
    Builds a mock file given a service name, and writes it to the
    given output path.
    '''
    in_progress_number = 3
    sleep_time = 0.1
    root = os.getenv('ROOTPATH')
    if not root:
        root = '../'
    fds = descriptor_pb2.FileDescriptorSet()
    with open(f'{root}protocol/services.desc', "rb") as f:
        fds.MergeFromString(f.read())
    with open(output_path, 'w') as f:
        # Write out auto-generated lines
        lines = []
        lines.append("############################################################")
        lines.append("# NOTE: THIS FILE IS AUTOGENERATED BY PROXY.PY. DO NOT EDIT!")
        lines.append("############################################################")
        lines.append("import grpc")
        lines.append("import asyncio")
        lines.append("# Utility import")
        lines.append("from util.rpc import generate_response")
        lines.append("from util.log import get_logger")
        lines.append("# Protocol import")
        lines.append(f"import bindings.python.services.{service_proto}_pb2 as {service_proto}_pb2")
        lines.append(f"import bindings.python.services.{service_proto}_pb2_grpc as {service_proto}_pb2_grpc")
        lines.append("")
        lines.append(f"logger = get_logger('mocks/{service_proto}')")
        lines.append("")
        lines.append(f"class Mock{service_name}Service({service_proto}_pb2_grpc.{service_name}Servicer):")
        lines.append("    def __init__(self, sequencer):")
        lines.append(f"        self._sequencer = sequencer")
        
        # Iterate through the descriptor set until target service is found
        for file in fds.file:
            if file.name != f'services/{service_proto}.proto':
                continue
            for service in file.service:
                if service.name != service_name:
                    continue
                # Generate mock methods for each of the methods in the service
                for method in service.method:
                    rpc_name = method.name
                    if method.client_streaming and method.server_streaming:
                        raise NotImplemented("No mock generation method for method type: bidirectional stream!")
                    elif method.client_streaming:
                        raise NotImplemented("No mock generation method for method type: client stream!")
                    elif method.server_streaming:
                        lines.append(f"    async def {rpc_name}(self, request, context):")
                        lines.append(f"        self._sequencer.write(request)")
                        lines.append(f"        logger.info('{rpc_name} called!')")
                        lines.append(f"        yield {service_proto}_pb2.{rpc_name}Response(response=generate_response(0))")
                        lines.append(f"        for i in range({in_progress_number}):")
                        lines.append(f"            yield {service_proto}_pb2.{rpc_name}Response(response=generate_response(1))")
                        lines.append(f"            await asyncio.sleep({sleep_time})")
                        lines.append(f"        yield {service_proto}_pb2.{rpc_name}Response(response=generate_response(2))")
                    else:
                        lines.append(f"    async def {rpc_name}(self, request, context):")
                        lines.append(f"        self._sequencer.write(request)")
                        lines.append(f"        logger.info('{rpc_name} called!')")
                        lines.append(f"        return {service_proto}_pb2.{rpc_name}Response(response=generate_response(2))")
        
        f.writelines("\n".join(lines))
