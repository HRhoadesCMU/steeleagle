from abc import ABC, abstractmethod
import asyncio

from protocol.steeleagle import dataplane_pb2 as data_protocol
from protocol.steeleagle import controlplane_pb2 as control_protocol
from protocol.steeleagle import common_pb2 as common_protocol

import zmq
import zmq.asyncio

class DroneDeviceItf(ABC):
    """
    The interface for Python drone devices. Defines the operations
    that device classes must implement for full compatibility.
    """

    class Response:
        """
        Response generated by device commands.

        :param rid: Response ID, 1 is success and  0 is failure.
        :type rid: int
        :param message: Message string to describe reason for failure.
        :type message: string
        """
        def __init__(self, rid, message):
            """
            Constructor method.
            """
            self.rid = rid
            self.message = message

        def __bool__(self):
            """
            Overloaded boolean operator to support easy success checks.
            """
            return self.rid != 0

    @abstractmethod
    async def connect(self):
        """
        Connect to the drone hardware.

        :return: 'True' if successful, 'False' otherwise 
        :rtype: bool
        """
        pass

    @abstractmethod
    async def isConnected(self):
        """
        Checks to see if the drone hardware is connected.

        :return: 'True' if connected, 'False' otherwise 
        :rtype: bool
        """
        pass

    @abstractmethod
    async def disconnect(self):
        """
        Disconnects from the drone hardware.
        """
        pass
    
    
    @abstractmethod
    async def takeOff(self):
        """
        Instruct the drone to arm and take off.
        """
        pass

    @abstractmethod
    async def land(self):
        """
        Instruct the drone to land and disarm.
        """
        pass

    @abstractmethod
    async def setHome(self, loc: common_protocol.Location):
        """
        Set the home destination for the drone.
        
        :param lat: New home latitude
        :type lat: float
        :param lng: New home longitude
        :type lng: float
        :param alt: New home altitude
        :type alt: float
        :return: Response object  
        :rtype: class: Response
        """
        pass

    @abstractmethod
    async def rth(self):
        """
        Return to home destination.

        :return: Response object
        :rtype: class: Response
        """
        pass

    @abstractmethod
    async def setVelocity(self, vel: common_protocol.Velocity):
        """
        Set the velocity of the drone.

        :param forward_vel: Target velocity along forward axis, 
            in meters per second
        :type forward_vel: float
        :param right_vel: Target velocity along right axis, 
            in meters per second
        :type right_vel: float
        :param up_vel: Target velocity along up axis, in meters per second
        :type up_vel: float
        :param angle_vel: Target angular velocity, in degrees per second
        :type angle_vel: float
        :return: Response object
        :rtype: class: Response
        """
        pass
    
    @abstractmethod
    async def setGPSLocation(self, loc: common_protocol.Location):
        """
        Set a target GPS location for the drone.

        :param lat: Target latitude, in degrees
        :type lat: float
        :param lng: Target longitude, in degrees
        :type lng: float
        :param alt: Target altitude, in meters
        :type alt: float
        :param bearing: Target bearing, in degrees
        :type bearing: float
        :return: Response object
        :rtype: class: Response
        """
        pass
    
    @abstractmethod
    async def setRelativePosition(self, pos: common_protocol.Position):
        """
        Set a target position for the drone, relative to the take off
        position in meters.

        :param north: Target position along the north axis, in meters.
        :type north: float
        :param east: Target position along the east axis, in meters.
        :type east: float
        :param up: Target position along the up axis, in meters.
        :type up: float
        :param bearing: Target bearing, in degrees
        :type bearing: float
        :return: Response object
        :rtype: class: Response
        """
        pass
    
    @abstractmethod
    async def hover(self):
       """
       Instruct the drone to hover.
       
       :return: Response object
       :rtype: class: Response
       """
       pass

    @abstractmethod
    async def startStreaming(self):
        """
        Start streaming video from the drone.
        """
        pass
    
    @abstractmethod
    async def stopStreaming(self):
        """
        Stop streaming video from the drone.
        """
        pass
    
    @abstractmethod
    async def streamVideo(self, cam_sock: zmq.asyncio.Socket):
        """
        Stream video frame from the drone.
        """
        pass
    
    @abstractmethod
    async def streamTelemetry(self, tel_sock: zmq.asyncio.Socket):
        """
        stream telemetry data from the drone.
        """
        pass
