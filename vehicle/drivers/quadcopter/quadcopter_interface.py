from abc import ABC, abstractmethod
import asyncio

from protocol.steeleagle import dataplane_pb2 as data_protocol
from protocol.steeleagle import controlplane_pb2 as control_protocol
from protocol.steeleagle import common_pb2 as common_protocol

import zmq
import zmq.asyncio

class DroneDeviceItf(ABC):
    """
    The interface for Python drone devices. Defines the operations
    that device classes must implement for full compatibility.
    """

    class Response:
        """
        Response generated by device commands.

        :param rid: Response ID, 1 indicates success and 0 indicates failure.
        :type rid: int
        :param message: Message string describing success or reason for failure.
        :type message: str
        """
        def __init__(self, rid: int, message: str):
            """
            Constructor method for Response.
            """
            self.rid = rid
            self.message = message

        def __bool__(self) -> bool:
            """
            Overloaded boolean operator to support easy success checks.
            If rid != 0, this evaluates to True; otherwise, False.
            """
            return self.rid != 0

    @abstractmethod
    async def connect(self) -> bool:
        """
        Connects to the drone hardware.

        :return: True if successful, False otherwise
        :rtype: bool
        """
        pass

    @abstractmethod
    async def isConnected(self) -> bool:
        """
        Checks whether the drone hardware is currently connected.

        :return: True if connected, False otherwise
        :rtype: bool
        """
        pass

    @abstractmethod
    async def disconnect(self) -> None:
        """
        Disconnects from the drone hardware.

        :return: None
        """
        pass

    @abstractmethod
    async def takeOff(self) -> control_protocol.Response:
        """
        Arms the drone (if necessary) and instructs it to take off.

        :return: A response object indicating success or failure
        :rtype: :class:`DroneDeviceItf.Response`
        """
        pass

    @abstractmethod
    async def land(self) -> control_protocol.Response:
        """
        Instructs the drone to land and disarm.

        :return: A response object indicating success or failure
        :rtype: :class:`DroneDeviceItf.Response`
        """
        pass

    @abstractmethod
    async def setHome(self, loc: common_protocol.Location) -> control_protocol.Response:
        """
        Sets the home (return-to-home) destination for the drone, using
        a protobuf-based Location message.

        :param loc: The desired home location, containing lat, lng, and alt
        :type loc: :class:`common_protocol.Location`
        :return: A response object indicating success or failure
        :rtype: :class:`DroneDeviceItf.Response`
        """
        pass

    @abstractmethod
    async def rth(self) -> control_protocol.Response:
        """
        Commands the drone to return to its previously set home location.

        :return: A response object indicating success or failure
        :rtype: :class:`DroneDeviceItf.Response`
        """
        pass

    @abstractmethod
    async def setVelocity(self, vel: common_protocol.Velocity) -> control_protocol.Response:
        """
        Sets the drone's velocity using a protobuf-based Velocity message.

        The Velocity message typically contains forward_vel, right_vel,
        up_vel, and angle_vel, describing motion in meters per second
        and angular velocity in degrees per second.

        :param vel: The target velocity in each axis plus angular velocity
        :type vel: :class:`common_protocol.Velocity`
        :return: A response object indicating success or failure
        :rtype: :class:`DroneDeviceItf.Response`
        """
        pass

    @abstractmethod
    async def setGPSLocation(self, loc: common_protocol.Location) -> control_protocol.Response:
        """
        Commands the drone to move to a specific GPS location (lat/lng/alt).

        The Location may also imply a bearing or heading, if so desired.

        :param loc: The desired GPS location, including latitude, longitude, altitude
        :type loc: :class:`common_protocol.Location`
        :return: A response object indicating success or failure
        :rtype: :class:`DroneDeviceItf.Response`
        """
        pass

    @abstractmethod
    async def setRelativePosition(self, pos: common_protocol.Position) -> control_protocol.Response:
        """
        Sets a target position for the drone relative to its initial (takeoff) point,
        in meters. The Position message can include north, east, up, and bearing
        components.

        :param pos: The relative position offsets plus bearing
        :type pos: :class:`common_protocol.Position`
        :return: A response object indicating success or failure
        :rtype: :class:`DroneDeviceItf.Response`
        """
        pass

    @abstractmethod
    async def hover(self) -> control_protocol.Response:
       """
       Instructs the drone to hover in place.

       :return: A response object indicating success or failure
       :rtype: :class:`DroneDeviceItf.Response`
       """
       pass

    @abstractmethod
    async def streamVideo(self, cam_sock: zmq.asyncio.Socket) -> None:
        """
        Continuously sends video frames from the drone to the provided ZeroMQ socket.

        The implementation is expected to:
          - Acquire frames from the drone's camera or streaming buffer
          - Serialize them (e.g., as a protobuf `Frame` message)
          - Send them to `cam_sock` in a loop until the drone disconnects or streaming stops

        :param cam_sock: ZeroMQ asynchronous socket to which frames are sent
        :type cam_sock: :class:`zmq.asyncio.Socket`
        :return: None
        """
        pass

    @abstractmethod
    async def streamTelemetry(self, tel_sock: zmq.asyncio.Socket) -> None:
        """
        Continuously sends telemetry data from the drone to the provided ZeroMQ socket.

        The implementation is expected to:
          - Gather telemetry info (GPS position, battery, velocity, etc.)
          - Populate a protobuf `Telemetry` message
          - Send it to `tel_sock` in a loop until the drone disconnects or streaming stops

        :param tel_sock: ZeroMQ asynchronous socket to which telemetry messages are sent
        :type tel_sock: :class:`zmq.asyncio.Socket`
        :return: None
        """
        pass
