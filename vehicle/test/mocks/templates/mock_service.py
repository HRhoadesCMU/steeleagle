#############################################################################
# NOTE: THIS FILE IS AUTOGENERATED BY GENERATE_MOCK_SERVICES.PY. DO NOT EDIT!
#############################################################################

import grpc
import asyncio
import logging
# Utility import
from steeleagle_sdk.protocol.rpc_helpers import generate_response
# Protocol import
import steeleagle_sdk.protocol.services.{{ service_filename }}_pb2 as {{ service_filename }}_pb2
import steeleagle_sdk.protocol.services.{{ service_filename }}_pb2_grpc as {{ service_filename }}_pb2_grpc

logger = logging.getLogger('mocks/{{ service_filename }}')

class Mock{{ service_name }}Service({{ service_filename }}_pb2_grpc.{{ service_name }}Servicer):
    '''
    Mock servicer that writes to a global message sequence list so that message ordering
    can be verified in testing.
    '''
    def __init__(self, sequencer):
        self._sequencer = sequencer
    {% for method in methods %}{% if method.streaming %}
    async def {{ method.name }}(self, request, context):
        self._sequencer.write(request)
        logger.info('{{ method.name }} called!')
        yield generate_response(0)
        for i in range({{ in_progress_number }}):
            yield generate_response(1)
            await asyncio.sleep({{ sleep_time }})
        yield generate_response(2)
    {% else %}
    async def {{ method.name }}(self, request, context):
        self._sequencer.write(request)
        logger.info('{{ method.name }} called!')
        return generate_response(2)
    {% endif %}{% endfor %}
