// SPDX-FileCopyrightText: 2023 Carnegie Mellon University - Satyalab
//
// SPDX-License-Identifier: GPL-2.0-only

syntax = "proto3";

package cnc;

option java_package = "edu.cmu.cs.steeleagle";
option java_outer_classname = "Protos";

message Location {
  string name = 1;
  double latitude = 2;
  double longitude = 3;
  double altitude = 4;
}

message PCMD {
  int32 gaz = 1;
  int32 yaw = 2;
  int32 pitch = 3;
  int32 roll = 4;
  int32 gimbal_pitch = 5;
}

message Command {
  string for_drone_id = 1;
  string script_url = 2;
  bool halt = 3;
  PCMD pcmd = 4;
  bool takeoff = 5;
  bool land = 6;
  bool manual = 7;
  bool rth = 8;
}

message DroneStatus {
  int64 battery = 1;
  double gimbal_pitch = 2;
  double bearing = 3;
  int64 rssi = 4;
  int64 mag = 5;
}

message HSV {
  int64 H = 1;
  int64 S = 2;
  int64 V = 3;
}

message Extras {
    bool registering = 1;
    string drone_id = 2;
    string commander_id = 3;
    Command cmd = 4;
    Location location = 5;
    DroneStatus status = 6;
    string detection_model = 7;

    //for HSV filtering of object detection results
    HSV lower_bound = 8;
    HSV upper_bound = 9;
}

// Driver - Kernel API
message Frame {
  bytes data = 1;
  int64 width = 2;
  int64 height = 3;
  int64 channels = 4; //rgb, greyscale, etc
  int64 id = 5; //for future correlation
}

enum ResponseStatus {
  OK = 0;
  FAILED = 1;
  NOTSUPPORTED = 2;
}

enum Magnetometer {
  CALIBRATED = 0;
  RECOMMENDED = 1;
  REQUIRED = 2;
  UNUSED = 3;
  PERTURBATION = 4;
}

message Attitude {
  double yaw = 1;
  double pitch = 2;
  double roll = 3;
  double thrust = 4;
}

message IMU {
  double xvel = 1;
  double yvel = 2;
  double zvel = 3;
  double rotvel = 4;
}

message Position {
  double x = 1;
  double y = 2;
  double z = 3;
  double theta = 4;
}

// Pub/Sub for telemetry
message Telemetry {
  Location global_position = 1;
  Magnetometer mag = 2;
  int64 battery = 3;
  Attitude gimbal_attitude = 4;
  Attitude drone_attitude = 5;
  IMU imu = 6;
  Position relative_position = 7;
  int64 satellites = 8;
}

message ConnectionStatus {
  bool isConnected = 1;
  int64 wifi_rssi = 2;
  int64 cellular_rssi = 3;
  int64 radio_rssi = 4;
  string drone_name = 5;
}

enum CameraType {
  RGB = 0;
  STEREO = 1;
  THERMAL = 2;
  NIGHT = 3;
}

message Camera {
  repeated int64 id = 1;
  repeated CameraType type = 2;
}

// Request/Response for commands
message Response {
  ResponseStatus status = 1;
  int64 seqNum = 2;
}

message Driver {
  oneof method {
    Attitude setAttitude = 1;
    ConnectionStatus connectionStatus = 2;
    bool takeOff = 3;
    bool land = 4;
    bool hover = 5;
    bool kill = 6;
    bool rth = 7; //return to home
    Location setHome = 8;
    Location getHome = 9;
    Position setVelocity = 10;
    Position setRelativePosition = 11; //relative to home Position
    Position setGlobalPosition = 12;
    Position setTranslatedPosition = 13; //relative to current position
    int64 switchCamera = 14; //change current switchCamera
    Camera getCameras = 15;
  }
  Response resp = 16;
}

// Kernel - Mission Controller API
/*Request/Response for commands should just use the Driver message;
the Kernel will reject any privileged calls

message Driver {
  oneof method {
...
  }
}
*/

message Mission {
  oneof method {
    //for MissionController
    bool startMission = 1;
    bool pauseMission = 2;
    bool resumeMission = 3;
    bool stopMission = 4;
    //for Kernel
    string downloadMission = 5; // URL that specifies the zip file to download
  }
  string UUID = 6; //unique mission reference for cataloging
}

message ComputeResult {
  string result = 1; //JSON/YAML/etc, varies by compute engine
  int64 frameId = 2; //for future correlation
}