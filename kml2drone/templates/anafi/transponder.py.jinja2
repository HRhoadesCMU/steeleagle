broadcasting = True

plan = [] 
{% for k,v in placemarks.items() -%}
{% for c in v.coords %}
plan.append({'lat': {{c.lat}}, 'lng': {{c.lng}}})
{%- endfor %}
{% endfor %}

# Transponder thread which will update the drone's location on the map.
def transponder_thread(drone, tag):
    global broadcasting
    while (broadcasting):
        airspeed = 0
        try:
            speed = drone.get_state(SpeedChanged)
            airspeed = math.sqrt(speed["speedX"]**2 + speed["speedY"]**2 + speed["speedZ"]**2)
        except:
            pass
        try:
            loc = drone.get_state(GpsLocationChanged)
            state = drone.get_state(FlyingStateChanged)
            payload = {"data": {"tag": tag, "lat": loc["latitude"], "lng": loc["longitude"], "alt": loc["altitude"], "spd": airspeed, "state": state["state"].name, "plan": plan}, "droneid": tag}
            r = requests.post("http://{{dashboard_address}}:{{dashboard_port}}/update", json=payload)
            time.sleep(1)
        except Exception as e:
            # This means the data is not available just yet. Olympe will raise a runtime error if any of the
            # get_state() calls fail.
            print(e)
            broadcasting = False
    # Delete the drone to cleanup.
    r = requests.post("http://{{dashboard_address}}:{{dashboard_port}}/delete", json={"droneid": tag})