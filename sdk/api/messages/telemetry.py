#####################################################################
# NOTE: THIS FILE IS AUTOGENERATED BY GENERATE_TYPES.PY. DO NOT EDIT!
#####################################################################
from api.base import Datatype
from dataclasses import dataclass
from enum import Enum
from api.messages.common import (Location, Velocity, Position, Pose)
from api.messages.google.duration import Duration
from api.messages.google.timestamp import Timestamp
from dsl.compiler.registry import register_data

''' Enums '''
class MotionStatus(Enum):

    MOTORS_OFF = 0
    
    RAMPING = 1
    
    IDLE = 2
    
    IN_TRANSIT = 3
    

class ImagingSensorType(Enum):
    '''Data related to imaging sensors'''
    UNKNOWN_IMAGING_SENSOR_TYPE = 0
    
    RGB = 1
    
    STEREO = 2
    
    THERMAL = 3
    
    NIGHT = 4
    
    LIDAR = 5
    
    RGBD = 6
    
    TOF = 7
    
    RADAR = 8
    

class BatteryWarning(Enum):

    NONE = 0
    '''The vehicle is above 30% battery'''
    LOW = 1
    '''The vehicle is below 30% battery'''
    CRITICAL = 2
    '''The vehicle is below 15% battery'''

class GPSWarning(Enum):

    NO_GPS_WARNING = 0
    '''GPS readings are nominal and a fix has been achieved'''
    WEAK_SIGNAL = 1
    '''Weak GPS fix, expect errant global position data'''
    NO_FIX = 2
    '''No GPS fix'''

class MagnetometerWarning(Enum):

    NO_MAGNETOMETER_WARNING = 0
    '''Magnetometer readings are nominal'''
    PERTURBATION = 1
    '''The vehicle is experiencing magnetic perturbations'''

class ConnectionWarning(Enum):

    NO_CONNECTION_WARNING = 0
    '''Connection to remote server is nominal'''
    DISCONNECTED = 1
    '''Contact has been lost with the remote server'''
    WEAK_CONNECTION = 2
    '''Connection is experiencing interference or is weak'''

class CompassWarning(Enum):

    NO_COMPASS_WARNING = 0
    '''Absolute heading is nominal'''
    WEAK_HEADING_LOCK = 1
    '''Absolute heading is available but may be incorrect'''
    NO_HEADING_LOCK = 2
    '''No absolute heading available from the vehicle'''

class MissionExecState(Enum):
    '''Data related to the current mission'''
    READY = 0
    '''Mission is ready to be executed'''
    IN_PROGRESS = 1
    '''Mission is in progress'''
    PAUSED = 3
    '''Mission is paused'''
    COMPLETED = 4
    '''Mission has been completed'''
    CANCELED = 5
    '''Mission was cancelled'''

''' Messages '''
@register_data
class TelemetryStreamInfo(Datatype):

    current_frequency: int
    '''Current frequency of telemetry messages, in Hz'''
    max_frequency: int
    '''Maximum frequency of telemetry messages, in Hz'''
    uptime: Duration
    '''Uptime of the stream'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.TelemetryStreamInfo'

@register_data
class BatteryInfo(Datatype):

    percentage: int
    '''Battery level [0-100]%'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.BatteryInfo'

@register_data
class GPSInfo(Datatype):

    satellites: int
    '''Number of satellites used in GPS fix'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.GPSInfo'

@register_data
class CommsInfo(Datatype):


    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.CommsInfo'

@register_data
class VehicleInfo(Datatype):

    name: str
    '''The vehicle that this telemetry corresponds to'''
    model: str
    '''Model of the vehicle'''
    manufacturer: str
    '''Manufacturer of the vehicle'''
    motion_status: MotionStatus
    '''Current status of the vehicle'''
    battery_info: BatteryInfo
    '''Battery info for the vehicle'''
    gps_info: GPSInfo
    '''GPS sensor info for the vehicle'''
    comms_info: CommsInfo
    '''Communications info for the vehicle'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.VehicleInfo'

@register_data
class SetpointInfo(Datatype):

    position_body_sp: Position
    '''Default to all zeros local position setpoint'''
    position_enu_sp: Position
    
    global_sp: Location
    
    velocity_body_sp: Velocity
    
    velocity_enu_sp: Velocity
    

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.SetpointInfo'

@register_data
class PositionInfo(Datatype):

    home: Location
    '''Global position that will be used when returning home'''
    global_position: Location
    '''Current global position of the vehicle'''
    relative_position: Position
    '''Current local position of the vehicle in the global ENU (East, North, Up) coordinate frame, relative to take off position'''
    velocity_enu: Velocity
    '''Current velocity of the vehicle in the global ENU (East, North, Up) coordinate frame'''
    velocity_body: Velocity
    '''Current velocity of the vehicle in the body (forward, right, up) coordinate frame'''
    setpoint_info: SetpointInfo
    '''Info on the current vehicle setpoint'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.PositionInfo'

@register_data
class GimbalStatus(Datatype):

    id: int
    '''ID of the gimbal'''
    pose_body: Pose
    '''Current pose in the body reference frame'''
    pose_enu: Pose
    '''Current pose in the ENU reference frame'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.GimbalStatus'

@register_data
class GimbalInfo(Datatype):

    num_gimbals: int
    '''Number of connected gimbals'''
    gimbals: GimbalStatus
    '''List of connected gimbals'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.GimbalInfo'

@register_data
class ImagingSensorStatus(Datatype):

    id: int
    '''ID of the imaging sensor'''
    type: ImagingSensorType
    '''Type of the imaging sensor'''
    active: bool
    '''Indicates whether the imaging sensor is currently streaming'''
    supports_secondary: bool
    '''Indicates whether the imaging sensor supports background streaming'''
    current_fps: int
    '''Current streaming frames per second'''
    max_fps: int
    '''Maximum streaming frames per second'''
    h_res: int
    '''Horizontal resolution'''
    v_res: int
    '''Vertical resolution'''
    channels: int
    '''Number of image channels'''
    h_fov: int
    '''Horizontal FOV'''
    v_fov: int
    '''Vertical FOV'''
    gimbal_mounted: bool
    '''Indicates if imaging sensor is gimbal mounted'''
    gimbal_id: int
    '''Indicates which gimbal the imaging sensor is mounted on'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.ImagingSensorStatus'

@register_data
class ImagingSensorStreamStatus(Datatype):

    stream_capacity: int
    '''The total number of allowed simultaneously streaming cameras'''
    num_streams: int
    '''The total number of currently streaming cameras'''
    primary_cam: int
    '''ID of the primary camera'''
    secondary_cams: int
    '''IDs of the secondary active cameras'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.ImagingSensorStreamStatus'

@register_data
class ImagingSensorInfo(Datatype):

    stream_status: ImagingSensorStreamStatus
    '''Status of current imaging sensor streams'''
    sensors: ImagingSensorStatus
    '''List of connected imaging sensors'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.ImagingSensorInfo'

@register_data
class AlertInfo(Datatype):

    battery_warning: BatteryWarning
    '''Battery warnings'''
    gps_warning: GPSWarning
    '''GPS warnings'''
    magnetometer_warning: MagnetometerWarning
    '''Magnetometer warnings'''
    connection_warning: ConnectionWarning
    '''Connection warnings'''
    compass_warning: CompassWarning
    '''Compass warnings'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.AlertInfo'

@register_data
class DriverTelemetry(Datatype):
    '''Telemetry message for the vehicle, originated from the driver module'''
    timestamp: Timestamp
    '''Timestamp of message'''
    telemetry_stream_info: TelemetryStreamInfo
    '''Info about current telemetry stream'''
    vehicle_info: VehicleInfo
    '''The vehicle that this telemetry corresponds to'''
    position_info: PositionInfo
    '''Positional info about the vehicle'''
    gimbal_info: GimbalInfo
    '''Status on attached gimbals and their orientations'''
    imaging_sensor_info: ImagingSensorInfo
    '''Information about the vehicle imaging sensors'''
    alert_info: AlertInfo
    '''Enumeration of vehicle warnings'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.DriverTelemetry'

@register_data
class Frame(Datatype):
    '''Imaging sensor frame data streamed from the driver module'''
    timestamp: Timestamp
    '''Capture timestamp of the frame'''
    data: bytes
    '''Raw bytes representing the frame'''
    h_res: int
    '''Horizontal frame resolution in pixels'''
    v_res: int
    '''Vertical frame resolution in pixels'''
    d_res: int
    '''Depth resolution in pixels'''
    channels: int
    '''Number of channels'''
    id: int
    '''Frame ID for future correlation'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.Frame'

@register_data
class MissionInfo(Datatype):

    name: str
    '''Mission name'''
    hash: int
    '''Mission hash to establish version uniqueness'''
    age: Timestamp
    '''Timestamp of upload'''
    exec_state: MissionExecState
    '''Execution state of the mission'''
    task_state: str
    '''Task state of the mission (plaintext), if active'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.MissionInfo'

@register_data
class MissionTelemetry(Datatype):
    '''Telemetry message for the mission, originated from the mission module'''
    timestamp: Timestamp
    '''Timestamp of message'''
    telemetry_stream_info: TelemetryStreamInfo
    '''Info about the current telemetry stream'''
    mission_info: MissionInfo
    '''Info about the current mission states'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.telemetry.MissionTelemetry'
