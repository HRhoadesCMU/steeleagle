''' Enums '''
from dataclasses import dataclass
from enum import Enum
from api.messages.google.timestamp import Timestamp
from api.base import Datatype
from api.messages.common import Location, Position
from api.messages.computation import Detection

class ResponseStatus(Enum):
    '''Responses for RPC functions'''
    OK = 0
    '''Command received'''
    IN_PROGRESS = 1
    '''Command in progress'''
    COMPLETED = 2
    '''Command finished without error'''
    CANCELLED = 3
    '''The following are gRPC base status codes, more info can be found at: https://grpc.github.io/grpc/core/md_doc_statuscodes.html To translate a gRPC error code to a SteelEagle response code, add 2 to its enum value'''
    UNKNOWN = 4

    INVALID_ARGUMENT = 5

    DEADLINE_EXCEEDED = 6

    NOT_FOUND = 7

    ALREADY_EXISTS = 8

    PERMISSION_DENIED = 9

    RESOURCE_EXHAUSTED = 10

    FAILED_PRECONDITION = 11

    ABORTED = 12

    OUT_OF_RANGE = 13

    UNIMPLEMENTED = 14

    INTERNAL = 15

    UNAVAILABLE = 16

    DATA_LOSS = 17

    UNAUTHENTICATED = 18


''' Messages '''
@dataclass
class Response(Datatype):
    status: ResponseStatus

    response_string: str
    '''Detailed message on reason for response'''
    timestamp: Timestamp

    @staticmethod
    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.common.Response'
    
    

@dataclass
class DetectionResult(Datatype):

    detections: Detection
    

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.result.DetectionResult'

@dataclass
class AvoidanceResult(Datatype):

    actuation_vector: float
    '''Actuation vector towards safe area'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.result.AvoidanceResult'

@dataclass
class SLAMResult(Datatype):

    relative_position: Position
    
    global_position: Location
    

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.result.SLAMResult'

@dataclass
class ComputeResult(Datatype):

    timestamp: Timestamp
    '''Inference timestamp'''
    engine_name: str
    
    detection_result: DetectionResult
    
    avoidance_result: AvoidanceResult
    
    slam_result: SLAMResult
    
    generic_result: str
    '''JSON result'''

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.result.ComputeResult'
    


@dataclass
class FrameResult(Datatype):
    '''Compute results generated by datasink modules'''
    type: str
    
    frame_id: int
    '''For correlation'''
    result: ComputeResult
    

    def get_type_url():
        return 'type.googleapis.com/steeleagle.protocol.messages.result.FrameResult'