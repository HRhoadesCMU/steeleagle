# AUTOGENERATED — DO NOT EDIT.
# Source: steeleagle.protocol.services.control_service.Control
from __future__ import annotations
from typing import Optional, List
from google.protobuf.json_format import ParseDict
from google.protobuf.timestamp_pb2 import Timestamp as ProtoTimestamp
from api.actions.helper import (
    _payload_from_action,
    _run_unary,
    _run_streaming
)

# ---------------------------------------------------------------------
# Base types
# ---------------------------------------------------------------------
from api.base import Action, Datatype  # <- your Action base class
from dsl.compiler.registry import register_action  # if you’re using a registry

# ---------------------------------------------------------------------
# message types
# ---------------------------------------------------------------------
from api.messages.common import (
    Location, Velocity, Position, Pose
)
from api.messages.control import (
    AltitudeMode, HeadingMode, ReferenceFrame, PoseMode, ImagingSensorConfiguration, ReferenceFrameValue
)

# ---------------------------------------------------------------------
# Raw protobuf
# ---------------------------------------------------------------------
from  bindings.python.services import control_service_pb2 as ctrl_pb
from  bindings.python.services import control_service_pb2_grpc as ctrl_rpc


# ---------------------------------------------------------------------
# Stub
# ---------------------------------------------------------------------
STUB: ctrl_rpc.ControlStub = None

# =============================================================================
# Per-RPC actions (each returns CommonResponse)
# =============================================================================

@register_action
class Connect(Action):
    """Connects to the vehicle"""

    async def execute(self):
        req = ctrl_pb.ConnectRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_unary(STUB.Connect, req)


@register_action
class IsConnected(Action):
    """Checks whether the vehicle is successfully connected"""

    async def execute(self):
        req = ctrl_pb.IsConnectedRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_unary(STUB.IsConnected, req)


@register_action
class Disconnect(Action):
    """Disconnects from the vehicle"""

    async def execute(self):
        req = ctrl_pb.DisconnectRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_unary(STUB.Disconnect, req)


@register_action
class Arm(Action):
    """Order the vehicle to arm"""

    async def execute(self):
        req = ctrl_pb.ArmRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_unary(STUB.Arm, req)


@register_action
class Disarm(Action):
    """Order the vehicle to disarm"""

    async def execute(self):
        req = ctrl_pb.DisarmRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_unary(STUB.Disarm, req)


@register_action
class TakeOff(Action):
    """Order the vehicle to take off"""
    take_off_altitude: float  # meters (relative altitude)

    async def execute(self):
        req = ctrl_pb.TakeOffRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_streaming(STUB.TakeOff, req)


@register_action
class Land(Action):
    """Land the vehicle at its current position"""

    async def execute(self):
        req = ctrl_pb.LandRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_streaming(STUB.Land, req)


@register_action
class Hold(Action):
    """Order the vehicle to hold/loiter"""

    async def execute(self):
        req = ctrl_pb.HoldRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_streaming(STUB.Hold, req)


@register_action
class Kill(Action):
    """Emergency shutdown of the vehicle motors"""

    async def execute(self):
        req = ctrl_pb.KillRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_streaming(STUB.Kill, req)


@register_action
class SetHome(Action):
    """Changes the home destination for the vehicle"""
    location: Location  # new home location

    async def execute(self):
        req = ctrl_pb.SetHomeRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_unary(STUB.SetHome, req)


@register_action
class ReturnToHome(Action):
    """Return to the vehicle home destination"""

    async def execute(self):
        req = ctrl_pb.ReturnToHomeRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_streaming(STUB.ReturnToHome, req)


@register_action
class SetGlobalPosition(Action):
    """Transit the vehicle to a target global position, expressed in global coordinates"""
    location: Location
    altitude_mode: Optional[AltitudeMode] = None
    heading_mode: Optional[HeadingMode] = None
    max_velocity: Optional[Velocity] = None

    async def execute(self):
        req = ctrl_pb.SetGlobalPositionRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_streaming(STUB.SetGlobalPosition, req)


@register_action
class SetRelativePosition(Action):
    """Transit the vehicle to a target position relative to ENU or BODY frame, in meters"""
    position: Position
    max_velocity: Optional[Velocity] = None
    frame: ReferenceFrame = ReferenceFrameValue.BODY

    async def execute(self):
        req = ctrl_pb.SetRelativePositionRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_streaming(STUB.SetRelativePosition, req)


@register_action
class SetVelocity(Action):
    """Transit the vehicle at a target velocity in ENU or BODY frame, in m/s"""
    velocity: Velocity
    frame: ReferenceFrame = ReferenceFrameValue.BODY

    async def execute(self):
        req = ctrl_pb.SetVelocityRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_streaming(STUB.SetVelocity, req)


@register_action
class SetHeading(Action):
    """Sets the heading of the vehicle"""
    location: Location  # target heading or global location to look at
    heading_mode: HeadingMode

    async def execute(self):
        req = ctrl_pb.SetHeadingRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_streaming(STUB.SetHeading, req)


@register_action
class SetGimbalPose(Action):
    """Set the pose of the target gimbal"""
    gimbal_id: int
    pose: Pose
    mode: Optional[PoseMode] = None

    async def execute(self):
        req = ctrl_pb.SetGimbalPoseRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_streaming(STUB.SetGimbalPose, req)


@register_action
class ConfigureImagingSensorStream(Action):
    """Set the vehicle video stream parameters"""
    configurations: List[ImagingSensorConfiguration]

    async def execute(self):
        req = ctrl_pb.ConfigureImagingSensorStreamRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_unary(STUB.ConfigureImagingSensorStream, req)


@register_action
class ConfigureTelemetryStream(Action):
    """Set the vehicle telemetry stream parameters"""
    frequency: int  # Hz

    async def execute(self):
        req = ctrl_pb.ConfigureTelemetryStreamRequest()
        ParseDict(_payload_from_action(self), req)
        return await _run_unary(STUB.ConfigureTelemetryStream, req)
