// SPDX-FileCopyrightText: 2025 Carnegie Mellon University - Living Edge Lab
//
// SPDX-License-Identifier: GPL-2.0-only
/**
 * Messages/Calls related to the Dataplane component of SteelEagle.
 *
 * The dataplane is responsible for relaying telemetry and frame data
 * from the drone to the rest of the system.
 */
syntax = "proto3";
option py_generic_services = true;
package protocol.dataplane;
import "protocol/common.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message Request {
  int64 seq_num = 1;  // for correlation
  google.protobuf.Timestamp timestamp = 2; // time the request was made
  oneof type {
    TelemetryRequest tel = 3;
    FrameRequest frame  = 4;
    GetComputeResult cpt = 5;
  }
}

message Response {
  int64 seq_num = 1; // for correlation
  google.protobuf.Timestamp timestamp = 2;// time the response was sent
  protocol.common.ResponseStatus resp = 3;
  oneof type {
    Telemetry tel = 4;
    Frame frame = 5;
    ComputeResult cpt = 6;
  }
}

/*
* TELEMETRY
*/
message TelemetryRequest {
  google.protobuf.FieldMask field_mask = 1; // used to specify which fields of TelemetryResponse to return
}
message Telemetry {
  string drone_name = 1;
  protocol.common.Location global_position = 2;
  protocol.common.Magnetometer mag = 3; // enumeration of the status of the Magnetometer sensor
  int64 battery = 4;  // battery level [0-100]%
  protocol.common.Attitude gimbal_attitude = 5;
  protocol.common.Attitude drone_attitude = 6;
  protocol.common.Velocity velocity = 7;
  protocol.common.Position relative_position = 8;
  int64 satellites = 9; //number of satellites used in GPS fix
  bool is_connected = 10 [deprecated=true]; // use uptime instead
  int64 wifi_rssi = 11; // in -dbM
  int64 cellular_rssi = 12; // in -dbM
  int64 radio_rssi = 13;  // in -dbM
  string drone_model = 14; // manufacturer/model of the drone
  string status = 15; // i.e. 'idle', 'patroling', 'tracking'
  google.protobuf.Duration uptime = 16;
  protocol.common.Location home = 17; // lat/lng/alt that will be used when returnning home
  protocol.common.Camera camera = 18; // information about the drone's camera sensors
}

/*
* FRAME
*/
message FrameRequest {}
message Frame {
  bytes data = 1; // raw image bytes
  int64 width = 2;
  int64 height = 3;
  int64 channels = 4; //rgb, greyscale, etc
  int64 id = 5; //for future correlation
}

/*
* COMPUTE
*/
message GetComputeResult {
  required string key = 1;
}

message ComputeResult {
  required string key = 1;
  int64 frame_id = 2; //for correlation
  google.protobuf.Timestamp timestamp = 3;// time the response was sent
  oneof type {
    string generic = 4; //JSON/YAML/etc
    DetectionResult detection = 5;
    AvoidanceResult avoidance = 6;
  }
}

message Detection {
  int64 detection_id = 1; // can be multiple objects per frame
  string class_name = 2;
  double score = 3;
  protocol.common.BoundingBox bbox = 4;
  bool hsv_filter_passed = 5;
}

message DetectionResult {
  repeated Detection detections = 1;
}

message AvoidanceResult {
  double actuation_vector = 1;
}


