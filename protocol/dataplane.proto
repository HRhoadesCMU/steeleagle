// SPDX-FileCopyrightText: 2025 Carnegie Mellon University - Living Edge Lab
//
// SPDX-License-Identifier: GPL-2.0-only
/**
 * Messages/Calls related to the Dataplane component of SteelEagle.
 *
 * The dataplane is responsible for relaying telemetry and frame data
 * from the drone to the rest of the system.
 */
syntax = "proto3";
option py_generic_services = true;
package protocol.dataplane;
import "protocol/common.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message Request {
  uint64 seq_num = 1;  // For correlation
  google.protobuf.Timestamp timestamp = 2; // Time the request was made
  oneof type {
    TelemetryRequest tel = 3;
    FrameRequest frame  = 4;
    GetComputeResult cpt = 5;
  }
}

message Response {
  uint64 seq_num = 1; // For correlation
  google.protobuf.Timestamp timestamp = 2;// Time the response was sent
  protocol.common.ResponseStatus resp = 3;
  oneof type {
    Telemetry tel = 4;
    Frame frame = 5;
    ComputeResult cpt = 6;
  }
}

/*
* TELEMETRY
*/
message TelemetryRequest {
  google.protobuf.FieldMask field_mask = 1; // Used to specify which fields of TelemetryResponse to return
}
message Telemetry {
  string drone_name = 1;
  protocol.common.Location global_position = 2;
  protocol.common.Position relative_position = 3;
  protocol.common.Velocity velocity = 4;
  protocol.common.Pose gimbal_pose = 5;
  protocol.common.Location home = 6; // GPS location that will be used when returning home
  protocol.common.Cameras cameras = 7; // Information about the drone's camera sensors
  protocol.common.Alerts alerts = 8; // Enumeration of vehicle warnings
  string drone_model = 9; // Manufacturer/model of the drone
  string status = 10; // Details on the current autonomous task i.e. 'idle', 'patroling', 'tracking'
}

/*
* FRAME
*/
message FrameRequest {}
message Frame {
  bytes data = 1; // Raw bytes
  uint64 width = 2;
  uint64 height = 3;
  uint64 channels = 4; // RGB, greyscale, etc
  uint64 id = 5; // For future correlation
}

/*
* COMPUTE
*/
message GetComputeResult {
  string key = 1;
}

message ComputeResult {
  string key = 1;
  uint64 frame_id = 2; // For correlation
  google.protobuf.Timestamp timestamp = 3; // Time the response was sent
  oneof type {
    string generic = 4; // JSON/YAML/etc.
    DetectionResult detection = 5;
    AvoidanceResult avoidance = 6;
  }
}

message Detection {
  uint64 detection_id = 1; // Can be multiple objects per frame
  string class_name = 2;
  double score = 3;
  protocol.common.BoundingBox bbox = 4;
  bool hsv_filter_passed = 5;
}

message DetectionResult {
  repeated Detection detections = 1;
}

message AvoidanceResult {
  double actuation_vector = 1;
}
