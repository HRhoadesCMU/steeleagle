// SPDX-FileCopyrightText: 2025 Carnegie Mellon University - LivingEdgeLab
//
// SPDX-License-Identifier: GPL-2.0-only

syntax = "proto3";
package steeleagle.protocol.common;

import "google/protobuf/timestamp.proto";

/*
 * Request object for additional request info
 */
message Request {
  google.protobuf.Timestamp timestamp = 1;
}

/*
 * Responses for RPC functions
 */
enum ResponseStatus {
  OK = 0; // Command received
  IN_PROGRESS = 1; // Command in progress
  COMPLETED = 2; // Command finished without error
  // The following are gRPC base status codes, more info can be found at:
  // https://grpc.github.io/grpc/core/md_doc_statuscodes.html
  // To translate a gRPC error code to a SteelEagle response code, add 2
  // to its enum value
  CANCELLED = 3;
  UNKNOWN = 4;
  INVALID_ARGUMENT = 5;
  DEADLINE_EXCEEDED = 6;
  NOT_FOUND = 7;
  ALREADY_EXISTS = 8;
  PERMISSION_DENIED = 9;
  RESOURCE_EXHAUSTED = 10;
  FAILED_PRECONDITION = 11;
  ABORTED = 12;
  OUT_OF_RANGE = 13;
  UNIMPLEMENTED = 14;
  INTERNAL = 15;
  UNAVAILABLE = 16;
  DATA_LOSS = 17;
  UNAUTHENTICATED = 18;
}

message Response {
  ResponseStatus status = 1;
  optional string response_string = 2; // Detailed message on reason for response
  google.protobuf.Timestamp timestamp = 3;
}

/*
 * Angular offsets or poses in 3 dimensions [degrees]
 */
message Pose {
  optional double pitch = 1;
  optional double roll = 2;
  optional double yaw = 3;
}

/*
 * Representation of the speed in 3-dimensions [meters/s]
 */
message Velocity {
  optional double x_vel = 1; // Forward/north velocity
  optional double y_vel = 2; // Right/east velocity
  optional double z_vel = 3; // Up velocity
  optional double angular_vel = 4; // Angular velocity [degrees/s]
}

/*
 * Position offset relative to home or current location [meters]
 */
message Position {
  optional double x = 1; // Forward/north offset
  optional double y = 2; // Right/east offset
  optional double z = 3; // Up offset
  optional double angle = 4; // Angular offset [degrees]
}

/*
 * Location in global coordinates [latitude, longitude]
 */
message Location {
  optional double latitude = 1;
  optional double longitude = 2;
  optional double altitude = 3; // Above MSL [meters]
  optional double heading = 4;
}
