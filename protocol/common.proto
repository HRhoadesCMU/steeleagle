// SPDX-FileCopyrightText: 2025 Carnegie Mellon University - LivingEdgeLab
//
// SPDX-License-Identifier: GPL-2.0-only

syntax = "proto3";
package protocol.common;

import "google/protobuf/timestamp.proto";


/*
 * Request object for additional request info
 */
message Request {
  string sender = 1; // Identity of sender
  google.protobuf.Timestamp timestamp = 2;
}

/*
 * Responses for RPC functions
 */
enum ResponseStatus {
  OK = 0; 
  IN_PROGRESS = 1;
  FAILED = 2;
  NOT_SUPPORTED = 3;
  COMPLETED = 4;
  DENIED = 5;
  WARNING = 6;
}

message Response {
  ResponseStatus status = 1;
  string response_string = 2; // Detailed message on reason for response
  google.protobuf.Timestamp timestamp = 3;
}

/*
 * Angular offsets or poses in 3 dimensions [degrees]
 */
message Pose {
  double pitch = 1;
  double roll = 2;
  double yaw = 3;
}

/*
 * Representation of the speed in 4-dimensions in ENU coordinates [m/s]
 */
message VelocityENU {
  double north_vel = 1;
  double east_vel = 2;
  double up_vel = 3;
  double angular_vel = 4; // [degrees/s]
}

/*
 * Representation of the speed in 4-dimensions in body coordinates [m/s]
 */
message VelocityBody {
  double forward_vel = 1;
  double right_vel = 2;
  double up_vel = 3;
  double angular_vel = 4; // [degrees/s]
}

/*
 * Position relative to home location in ENU coordinates [meters]
 */
message PositionENU {
  double north = 1;
  double east = 2;
  double up = 3;
  double angle = 4; // [degrees]
}

/**
 * Position relative to current location in body coordinates [meters]
 */
message PositionBody {
  double forward = 1;
  double right = 2;
  double up = 3;
  double angle = 4; // [degrees]
}

/*
 * Location in global coordinates [latitude, longitude]
 */
message Location {
  double latitude = 1;
  double longitude = 2;
  double altitude = 3; // Above MSL [meters]
  double heading = 4;
}


/*
 * Defines the upper left and lower right corners of a detected object
 * in an image frame. Origin (0,0) is the top left corner of the input image.
 * (image_height, image_width) is the bottom right corner.
 * Also the class and confidence threshold associated with the box.
 */
message BoundingBox {
  double y_min = 1; // wrt to image size
  double x_min = 2; // wrt to image size
  double y_max = 3; // wrt to image size
  double x_max = 4; // wrt to image size
  string class_name = 5;
  float confidence = 6;
}

/*
 * Color filter represented by hue, saturation, and value
 * Uses OpenCV ranges: https://docs.opencv.org/4.x/df/d9d/tutorial_py_colorspaces.html
 */
message HSV {
  uint32 h = 1; // hue range is [0,179]
  uint32 s = 2; // saturation range is [0,255]
  uint32 v = 3; // value range is [0,255]
}

message PatrolArea {
  PatrolStatus status = 1;
  repeated string areas = 2;
  float altitude = 3;
}

enum PatrolStatus {
  UNKNOWN_PATROL_STATUS = 0;
  FINISH = 1;
  CONTINUE = 2;
}
