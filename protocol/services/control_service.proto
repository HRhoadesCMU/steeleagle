// SPDX-FileCopyrightText: 2025 Carnegie Mellon University - LivingEdgeLab
//
// SPDX-License-Identifier: GPL-2.0-only

syntax = "proto3";
package steeleagle.protocol.services.control_service;

import "common.proto";

/*
 * Used for low-level control of a vehicle
 */
service Control {
  // Connects to the vehicle
  rpc Connect (ConnectRequest) returns (ConnectResponse) {}
  // Disconnects from the vehicle
  rpc Disconnect (DisconnectRequest) returns (DisconnectResponse) {}
  // Order the vehicle to arm
  rpc Arm (ArmRequest) returns (ArmResponse) {}
  // Order the vehicle to disarm
  rpc Disarm (DisarmRequest) returns (DisarmResponse) {}
  // Order the vehicle to take off
  rpc TakeOff (TakeOffRequest) returns (stream TakeOffResponse) {}
  // Land the vehicle at its current position
  rpc Land (LandRequest) returns (stream LandResponse) {}
  // Order the vehicle to hold/loiter
  rpc Hold (HoldRequest) returns (stream HoldResponse) {}
  // Emergency shutdown of the vehicle motors
  rpc Kill (KillRequest) returns (stream KillResponse) {}
  // Changes the home destination for the vehicle
  rpc SetHome (SetHomeRequest) returns (SetHomeResponse) {}
  // Return to the vehicle home destination
  rpc ReturnToHome (ReturnToHomeRequest) 
    returns (stream ReturnToHomeResponse) {}
  // Transit the vehicle to a target global position, expressed
  // in global coordinates
  rpc SetGlobalPosition (SetGlobalPositionRequest)
    returns (stream SetGlobalPositionResponse) {}
  // Transit the vehicle to a target position relative to
  // the global ENU (East, North, Up) or vehicle frame of 
  // reference, in meters
  rpc SetRelativePosition (SetRelativePositionRequest)
    returns (stream SetRelativePositionResponse) {}
  // Transit the vehicle at a target velocity in the global
  // ENU (East, North, Up) or vehicle frame of reference, 
  // in meters per second
  rpc SetVelocity (SetVelocityRequest)
    returns (stream SetVelocityResponse) {}
  // Sets the heading of the vehicle
  rpc SetHeading (SetHeadingRequest)
    returns (stream SetHeadingResponse) {}
  // Set the pose of the target gimbal
  rpc SetGimbalPose (SetGimbalPoseRequest)
    returns (stream SetGimbalPoseResponse) {}
  // Set the vehicle video stream parameters
  rpc ConfigureImagingSensorStream (ConfigureImagingSensorStreamRequest)
    returns (ConfigureImagingSensorStreamResponse) {}
  // Set the vehicle telemetry stream parameters
  rpc ConfigureTelemetryStream (ConfigureTelemetryStreamRequest)
    returns (ConfigureTelemetryStreamResponse) {}   
}

message ConnectRequest {
  steeleagle.protocol.common.Request request = 1;
}

message ConnectResponse {
  steeleagle.protocol.common.Response response = 1;
}

message DisconnectRequest {
  steeleagle.protocol.common.Request request = 1;
}

message DisconnectResponse {
  steeleagle.protocol.common.Response response = 1;
}

message ArmRequest {
  steeleagle.protocol.common.Request request = 1;
}

message ArmResponse {
  steeleagle.protocol.common.Response response = 1;
}

message DisarmRequest {
  steeleagle.protocol.common.Request request = 1;
}

message DisarmResponse {
  steeleagle.protocol.common.Response response = 1;
}

message TakeOffRequest {
  steeleagle.protocol.common.Request request = 1;
  // Take off height in relative altitude [meters]
  float take_off_altitude = 2;
}

message TakeOffResponse {
  steeleagle.protocol.common.Response response = 1;
}

message LandRequest {
  steeleagle.protocol.common.Request request = 1;
}

message LandResponse {
  steeleagle.protocol.common.Response response = 1;
}

message HoldRequest {
  steeleagle.protocol.common.Request request = 1;
}

message HoldResponse {
  steeleagle.protocol.common.Response response = 1;
}

message KillRequest {
  steeleagle.protocol.common.Request request = 1;
}

message KillResponse {
  steeleagle.protocol.common.Response response = 1;
}

message SetHomeRequest {
  steeleagle.protocol.common.Request request = 1;
  steeleagle.protocol.common.Location location = 2; // New home location
}

message SetHomeResponse {
  steeleagle.protocol.common.Response response = 1;
}

message ReturnToHomeRequest {
  steeleagle.protocol.common.Request request = 1;
}

message ReturnToHomeResponse {
  steeleagle.protocol.common.Response response = 1;
}

enum AltitudeMode {
  ABSOLUTE = 0; // Meters above Mean Sea Level
  RELATIVE = 1; // Meters above takeoff location
}

enum HeadingMode {
  TO_TARGET = 0; // Orient towards the target location
  HEADING_START = 1; // Orient towards the given heading
}

message SetGlobalPositionRequest {
  steeleagle.protocol.common.Request request = 1;
  steeleagle.protocol.common.Location location = 2; // Target location
  // Determines whether the drone will consider altitude as meters above MSL
  // (Mean Sea Level), or relative to its takeoff location (default ABSOLUTE)
  optional AltitudeMode altitude_mode = 4;
  // Determines how the drone will orient during transit (default TO_TARGET)
  optional HeadingMode heading_mode = 5;
  // Maximum velocity during transit, north_vel determines horizontal
  // velocity, up_vel determines vertical velocity, and angular_vel
  // determines angular velocity (default 5 m/s)
  optional steeleagle.protocol.common.Velocity max_velocity = 6;
}

message SetGlobalPositionResponse {
  steeleagle.protocol.common.Response response = 1;
}

enum ReferenceFrame {
  BODY = 0; // Vehicle reference frame
  ENU = 1;  // Global (East, North, Up) reference frame
}

message SetRelativePositionRequest {
  steeleagle.protocol.common.Request request = 1;
  // Target position
  steeleagle.protocol.common.Position position = 2;
  // Maximum velocity during transit, x_vel determines horizontal
  // velocity, up_vel determines vertical velocity, and angular_vel
  // determines angular velocity
  optional steeleagle.protocol.common.Velocity max_velocity = 3;
  // Frame of reference
  optional ReferenceFrame frame = 4;
}

message SetRelativePositionResponse {
  steeleagle.protocol.common.Response response = 1;
}

message SetVelocityRequest {
  steeleagle.protocol.common.Request request = 1;
  // Target velocity
  steeleagle.protocol.common.Velocity velocity = 2;
  // Frame of reference
  optional ReferenceFrame frame = 3;
}

message SetVelocityResponse {
  steeleagle.protocol.common.Response response = 1;
}

message SetHeadingRequest {
  steeleagle.protocol.common.Request request = 1;
  // Target heading or global location to look at
  steeleagle.protocol.common.Location location = 2;
  // Determines how the drone will orient
  optional HeadingMode heading_mode = 5;
}

message SetHeadingResponse {
  steeleagle.protocol.common.Response response = 1;
}

enum PoseMode {
  ANGLE = 0; // Absolute angle
  OFFSET = 1; // Offset from current
  VELOCITY = 2; // Rotational velocities
}

message SetGimbalPoseRequest {
  steeleagle.protocol.common.Request request = 1;
  uint32 gimbal_id = 2; // ID of the target gimbal
  steeleagle.protocol.common.Pose pose = 3; // Target pose
  optional PoseMode mode = 4; // Specifies how to interpret the target pose
}

message SetGimbalPoseResponse {
  steeleagle.protocol.common.Response response = 1;
}

message ImagingSensorConfiguration {
  uint32 id = 1; // Target imaging sensor ID
  bool set_primary = 2; // Set this sensor as the primary stream
  uint32 set_fps = 3; // Target FPS for stream
} 

message ConfigureImagingSensorStreamRequest {
  steeleagle.protocol.common.Request request = 1;
  // List of configurations to be updated
  repeated ImagingSensorConfiguration configurations = 2;
}

message ConfigureImagingSensorStreamResponse {
  steeleagle.protocol.common.Response response = 1;
}

message ConfigureTelemetryStreamRequest {
  steeleagle.protocol.common.Request request = 1;
  // Target frequency of telemetry generation, in Hz
  uint32 frequency = 2;
}

message ConfigureTelemetryStreamResponse {
  steeleagle.protocol.common.Response response = 1;
}
