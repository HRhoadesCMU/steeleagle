// SPDX-FileCopyrightText: 2025 Carnegie Mellon University - Living Edge Lab
//
// SPDX-License-Identifier: GPL-2.0-only

syntax = "proto3";
package steeleagle.protocol.messages.telemetry;

import "common.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";


message TelemetryStreamInfo {
  // Current frequency of telemetry messages, in Hz
  uint32 current_frequency = 1; 
  // Maximum frequency of telemetry messages, in Hz
  uint32 max_frequency = 2;
  // Uptime of the stream
  google.protobuf.Duration uptime = 3;
}

enum MotionStatus {
  MOTORS_OFF = 0;
  RAMPING_UP = 1;
  IDLE = 2;
  IN_TRANSIT = 3;
  RAMPING_DOWN = 4;
}

message BatteryInfo {
  uint32 percentage = 1; // Battery level [0-100]%
}

message GPSInfo {
  uint32 satellites = 1; // Number of satellites used in GPS fix
}

message CommsInfo {} // For future use, will give info on communications

message VehicleInfo {
  // The vehicle that this telemetry corresponds to
  string name = 1;
  // Model of the vehicle
  string model = 2;
  // Manufacturer of the vehicle
  string manufacturer = 3;
  // Current status of the vehicle
  MotionStatus motion_status = 4;
  // Battery info for the vehicle
  BatteryInfo battery_info = 5;
  // GPS sensor info for the vehicle
  GPSInfo gps_info = 6;
  // Communications info for the vehicle
  CommsInfo comms_info = 7;
}

message SetpointInfo {
  // The current setpoint for the vehicle
  oneof setpoint {
    // Default to all zeros local position setpoint
    steeleagle.protocol.common.Position position_body_sp = 1;
    steeleagle.protocol.common.Position position_enu_sp = 2;
    steeleagle.protocol.common.Location global_sp = 3;
    steeleagle.protocol.common.Velocity velocity_body_sp = 4;
    steeleagle.protocol.common.Velocity velocity_enu_sp = 5;
  }
}

message PositionInfo {
  // Global position that will be used when returning home
  steeleagle.protocol.common.Location home = 1; 
  // Current global position of the vehicle
  steeleagle.protocol.common.Location global_position = 2;
  // Current local position of the vehicle in the global ENU
  // (East, North, Up) coordinate frame, relative to take off
  // position
  steeleagle.protocol.common.Position relative_position = 3;
  // Current velocity of the vehicle in the global ENU
  // (East, North, Up) coordinate frame
  steeleagle.protocol.common.Velocity velocity_enu = 4;
  // Current velocity of the vehicle in the body
  // (forward, right, up) coordinate frame
  steeleagle.protocol.common.Velocity velocity_body = 5;
  // Info on the current vehicle setpoint
  SetpointInfo setpoint_info = 6; 
}

message GimbalStatus {
  // ID of the gimbal
  uint32 id = 1;
  // Current pose in the body reference frame
  steeleagle.protocol.common.Pose pose_body = 2;
  // Current pose in the ENU reference frame
  steeleagle.protocol.common.Pose pose_enu = 3;
}

message GimbalInfo {
  // Number of connected gimbals
  uint32 num_gimbals = 1;
  // List of connected gimbals
  repeated GimbalStatus gimbals = 2;
}

/*
 * Data related to imaging sensors
 */
enum ImagingSensorType {
  UNKNOWN_IMAGING_SENSOR_TYPE = 0;
  RGB = 1;
  STEREO = 2;
  THERMAL = 3;
  NIGHT = 4;
  LIDAR = 5;
  RGBD = 6;
  TOF = 7;
  RADAR = 8;
}

message ImagingSensorStatus {
  uint32 id = 1; // ID of the imaging sensor
  ImagingSensorType type = 2; // Type of the imaging sensor
  // Indicates whether the imaging sensor is currently streaming
  bool active = 3;
  // Indicates whether the imaging sensor supports background streaming
  bool supports_secondary = 4;
  uint32 current_fps = 5; // Current streaming frames per second
  uint32 max_fps = 6; // Maximum streaming frames per second
  uint32 h_res = 7; // Horizontal resolution
  uint32 v_res = 8; // Vertical resolution
  uint32 channels = 9; // Number of image channels
  uint32 h_fov = 10; // Horizontal FOV
  uint32 v_fov = 11; // Vertical FOV
  bool gimbal_mounted = 12; // Indicates if imaging sensor is gimbal mounted
  // Indicates which gimbal the imaging sensor is mounted on
  uint32 gimbal_id = 13;
}

message ImagingSensorStreamStatus {
  // The total number of allowed simultaneously streaming cameras
  uint32 stream_capacity = 1; 
  uint32 num_streams = 2; // The total number of currently streaming cameras
  uint32 primary_cam = 3; // ID of the primary camera
  repeated uint32 secondary_cams = 4; // IDs of the secondary active cameras
}

message ImagingSensorInfo {
  // Status of current imaging sensor streams
  ImagingSensorStreamStatus stream_status = 1;
  // List of connected imaging sensors
  repeated ImagingSensorStatus sensors = 2;
}

enum BatteryWarning {
  // The vehicle is above 30% battery
  NONE = 0;
  // The vehicle is below 30% battery
  LOW = 1;
  // The vehicle is below 15% battery
  CRITICAL = 2;
}

enum GPSWarning {
  // GPS readings are nominal and a fix has been achieved
  NO_GPS_WARNING = 0;
  // Weak GPS fix, expect errant global position data
  WEAK_SIGNAL = 1;
  // No GPS fix
  NO_FIX = 2;
}

enum MagnetometerWarning {
  // Magnetometer readings are nominal
  NO_MAGNETOMETER_WARNING = 0;
  // The vehicle is experiencing magnetic perturbations
  PERTURBATION = 1;
}

enum ConnectionWarning {
  // Connection to remote server is nominal
  NO_CONNECTION_WARNING = 0;
  // Contact has been lost with the remote server
  DISCONNECTED = 1;
  // Connection is experiencing interference or is weak
  WEAK_CONNECTION = 2;
}

enum CompassWarning {
  // Absolute heading is nominal
  NO_COMPASS_WARNING = 0;
  // Absolute heading is available but may be incorrect
  WEAK_HEADING_LOCK = 1;
  // No absolute heading available from the vehicle
  NO_HEADING_LOCK = 2;
}

message AlertInfo {
  // Battery warnings
  BatteryWarning battery_warning = 1;
  // GPS warnings
  GPSWarning gps_warning = 2;
  // Magnetometer warnings
  MagnetometerWarning magnetometer_warning = 3;
  // Connection warnings
  ConnectionWarning connection_warning = 4;
  // Compass warnings
  CompassWarning compass_warning = 5;
}

/*
 * Telemetry message for the vehicle, originated from the driver module
 */
message DriverTelemetry {
  // Timestamp of message
  google.protobuf.Timestamp timestamp = 1;
  // Info about current telemetry stream
  TelemetryStreamInfo telemetry_stream_info = 2;
  // The vehicle that this telemetry corresponds to
  VehicleInfo vehicle_info = 3;
  // Positional info about the vehicle
  PositionInfo position_info = 4;
  // Status on attached gimbals and their orientations
  GimbalInfo gimbal_info = 5;
  // Information about the vehicle imaging sensors
  ImagingSensorInfo imaging_sensor_info = 6; 
  // Enumeration of vehicle warnings
  AlertInfo alert_info = 7;
}

/*
 * Imaging sensor frame data streamed from the driver module
 */
message Frame {
  // Capture timestamp of the frame
  google.protobuf.Timestamp timestamp = 1;
  // Raw bytes representing the frame
  bytes data = 2;
  // Horizontal frame resolution in pixels
  uint64 h_res = 3;
  // Vertical frame resolution in pixels
  uint64 v_res = 4;
  // Depth resolution in pixels
  uint64 d_res = 5;
  // Number of channels
  uint64 channels = 6;
  // Frame ID for future correlation
  uint64 id = 7;
}

/*
 * Data related to the current mission
 */
enum MissionExecState {
  // Mission is ready to be executed
  READY = 0;
  // Mission is in progress
  IN_PROGRESS = 1;
  // Mission is paused
  PAUSED = 3;
  // Mission has been completed
  COMPLETED = 4;
  // Mission was cancelled
  CANCELED = 5;
}

message MissionInfo {
  // Mission name
  string name = 1;
  // Mission hash to establish version uniqueness
  int64 hash = 2;
  // Timestamp of upload
  google.protobuf.Timestamp age = 3;
  // Execution state of the mission
  MissionExecState exec_state = 4;
  // Task state of the mission (plaintext), if active
  string task_state = 5;
}

/*
 * Telemetry message for the mission, originated from the mission module
 */
message MissionTelemetry {
  // Timestamp of message
  google.protobuf.Timestamp timestamp = 1;
  // Info about the current telemetry stream
  TelemetryStreamInfo telemetry_stream_info = 2;
  // Info about the current mission states
  repeated MissionInfo mission_info = 3;
}
